#!/usr/bin/env bash

set -euox pipefail

cd "$(dirname "$0")/../infra"

export DEPLOYER_VERSION=12
export AWS_REGION=${AWS_REGION:-ap-southeast-1}
export CHART_NAMESPACE="default"

function exists()
{
  command -v "$1" >/dev/null 2>&1
}

function decrypt_kms {
    ENCRYPTED_FILE="${1:-}"
    PLAINTEXT_FILE="${2:-}"
    aws kms decrypt \
        --region "${AWS_REGION}" \
        --ciphertext-blob fileb://"${ENCRYPTED_FILE}" \
        --output text \
        --query Plaintext \
         |base64 \
        --decode > "${PLAINTEXT_FILE}"
}

function encrypt_kms {
    KMS_KEY_ID="${1:-}"
    PLAINTEXT_FILE="${2:-}"
    ENCRYPTED_FILE="${3:-}"
    aws kms encrypt \
        --key-id "${KMS_KEY_ID}" \
        --region "${AWS_REGION}" \
        --plaintext fileb://"${PLAINTEXT_FILE}" \
        --output text \
        --query CiphertextBlob | base64 \
        --decode > "${ENCRYPTED_FILE}"
}

function authenticate_to_ecr {

    AWS_ACCOUNT_ID="${1:-}"
    REGION="${2:-}"

    if exists docker ; then
        echo "docker found in PATH."
    else
        echo "docker NOT found in PATH, Exiting!!!"
        exit 1
    fi
    echo "Authenticating to ECR"
    eval "$(docker run --network=host -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN --rm xueshanf/awscli aws ecr get-login --no-include-email --registry-ids "${AWS_ACCOUNT_ID}" --region "${REGION}")"
}



if [[ -n "${ENVIRONMENT:-}" ]]; then
    echo "Environment is ${ENVIRONMENT}"
    if [[ "${ENVIRONMENT}" = "DEV" ]]; then

        export AWS_ACCOUNT_ID="793999821937"
        export SERVICE_CLUSTER="dev-service-cluster"
        export VALUES_FILE="dev.yaml"

    elif [[ "${ENVIRONMENT}" = "STAGING" ]]; then

        export AWS_ACCOUNT_ID="958356994665"
        export SERVICE_CLUSTER="staging-service-cluster"
        export VALUES_FILE="staging.yaml"

    elif [[ "${ENVIRONMENT}" = "PROD" ]]; then

        export AWS_ACCOUNT_ID="961063351939"
        export SERVICE_CLUSTER="prod-service-cluster"
        export VALUES_FILE="prod.yaml"

    else
        echo "Unsupported ENVIRONMENT Value, Exiting!!!"
        exit 1
    fi

    echo "AWS Account ID => ${AWS_ACCOUNT_ID}, Cluster => ${SERVICE_CLUSTER}"
    authenticate_to_ecr "${AWS_ACCOUNT_ID}" "${AWS_REGION}"
else
    echo "ENVIRONMENT Value can't be null, Exiting!!!"
    exit 1
fi

echo "Deploying helm chart"

export AWS_DEPLOYER="${AWS_ACCOUNT_ID}".dkr.ecr."${AWS_REGION}".amazonaws.com/aws-deployer:"${DEPLOYER_VERSION}"
export CHART_NAME="$(grep "name" Chart.yaml | cut -d" " -f2)"

echo "Setting the Build Number"
# Below command is for testing on MAC.
#sed -i "" 's/BUILDKITE_BUILD_NUMBER/'"${BUILDKITE_BUILD_NUMBER:-latest}"'/g' Chart.yaml
sed -i 's/BUILDKITE_BUILD_NUMBER/'"${BUILDKITE_BUILD_NUMBER:-latest}"'/g' Chart.yaml

echo "Getting the kubectl credentials"

aws eks --region "${AWS_REGION}" update-kubeconfig --name "${SERVICE_CLUSTER}"

helm upgrade --install --force --wait "${CHART_NAME}" --namespace="${CHART_NAMESPACE}" --set buildNumber="${BUILDKITE_BUILD_NUMBER:-latest}" . -f "${VALUES_FILE}" --debug
