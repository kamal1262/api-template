# Default values for infra.

replicaCount: 1

department: data-engineering
image:
  repository: 793999821937.dkr.ecr.ap-southeast-1.amazonaws.com/api-template
  tag: latest
  pullPolicy: Always
serviceAccountName: reporting-sa
container:
  port: 8000
  healthCheckUrl: /healthcheck
  resources:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: "1"
  environments:

    # AWS X-RAY
    - name: AWS_XRAY_DAEMON_ADDRESS
      value: udp:xray-service.default:2000 tcp:xray-service.default:2000 

    - name: AWS_XRAY_CONTEXT_MISSING
      value: LOG_ERROR

    - name: XRAY_ENABLED
      value: "True"

    - name: XRAY_INSPECT_QUERY
      value: "False"

    - name: AWS_XRAY_SDK_ENABLED
      value: "True"

    # Environment
    - name: FLASK_ENV
      value: development

    # Entry point
    - name: FLASK_APP
      value: main.py

    # Flask port, default port is 5000
    - name: FLASK_RUN_PORT
      value: "8000"

    # Logging level
    - name: LOG_LEVEL
      value: INFO

    - name: JWT_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: api-template-credentials
          key: jwt_secret_key

    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: api-template-credentials
          key: database_password
      
    - name: DATABASE_URI
      valueFrom:
        configMapKeyRef:
          name: api-template-configmap
          key: database_uri

    - name: SQLALCHEMY_POOL_RECYCLE
      value: "3600"

    - name: PRODUCER_TOPICS
      value: "api-template-queue"

    - name: PRODUCER_TYPE
      value: "InMemoryPublisher"

    - name: TOPIC_CONSUMERS
      value: "SampleConsumer:InMemoryConsumer"

    - name: TOPIC_INTERVAL
      value: "2"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: NodePort
  port: 80
  targetPort: 8000

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/tags: Environment=dev,Team=data-engineering,app=api-template
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:793999821937:certificate/4f1511e7-6f45-4462-a248-5327ac36403c
    alb.ingress.kubernetes.io/healthcheck-path: /healthcheck
    alb.ingress.kubernetes.io/success-codes: 200-301
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '8'
  hosts:
    host: test.dev.data.rea-asia.com
    paths: /*
    port: 80

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

secrets:
  name: api-template-credentials
  data:
    database_password: Ymd1a2VlSHJKcjI0ZXpzckxXS3o= #base64 encoded
    jwt_secret_key: U2VDcmVUS2V5 #base64 encoded
configMap:
  name: api-template-configmap
  data:
    database_uri: mysql+pymysql://dbadmin:bgukeeHrJr24ezsrLWKz@ca2zergwylextf.csypt18aokzy.ap-southeast-1.rds.amazonaws.com:3306/commonsDB
